import React, { useEffect, useState } from 'react';

const params = new URLSearchParams(window.location.search);
let lctrSeq = params.get("lctrSeq") == null ? '' : params.get("lctrSeq");
let seq = params.get("seq") == null ? '' : params.get("seq");
let instEmlAddr = params.get("instEmlAddr") == null ? '' : params.get("instEmlAddr");

const UserGetSrvy = () => {
    const [questions, setQuestions] = useState([]);
    const [answers, setAnswers] = useState([]);
    const [error, setError] = useState(null);

    // ÏßàÎ¨∏ÏùÑ Î∂àÎü¨Ïò§Îäî Ìï®Ïàò
    useEffect(() => {
        const fetchQuestions = async () => {
            try {
                const response = await fetch(`http://localhost:9192/api/UserGetSrvy?lctrSeq=${lctrSeq}&instEmlAddr=${instEmlAddr}&seq=${seq}`);
                
                if (!response.ok) {
                    throw new Error(`ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò: ${response.status}`);
                }
        
                const data = await response.json();
                console.log('Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞:', data);
        
                if (Array.isArray(data)) {
                    setQuestions(data);
                    setAnswers(new Array(data.length).fill(''));
                } else {
                    throw new Error('Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞Í∞Ä Î∞∞Ïó¥Ïù¥ ÏïÑÎãôÎãàÎã§.');
                }
            } catch (error) {
                console.error('ÏßàÎ¨∏ Î∂àÎü¨Ïò§Í∏∞ Ïò§Î•ò:', error);
                setError(error.message);
            }
        };

        fetchQuestions();
    }, [lctrSeq, instEmlAddr, seq]);

    // ÎãµÎ≥Ä Î≥ÄÍ≤Ω Ï≤òÎ¶¨
    const handleChange = (event) => {
        const { name, value } = event.target;
        const index = parseInt(name.split('-')[1]); // Ïù∏Îç±Ïä§ Ï∂îÏ∂ú
        const newAnswers = [...answers];
        newAnswers[index] = value; // ÏÑ†ÌÉùÌïú Í∞íÏùÑ Ï†ÄÏû•
        setAnswers(newAnswers);
    };

    // ÎãµÎ≥Ä Ï†úÏ∂ú Ï≤òÎ¶¨
    const handleSubmit = (event) => {
        event.preventDefault(); 
    
        // ÎãµÏïà Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        const unansweredQuestions = questions.filter((_, index) => !answers[index]);
        if (unansweredQuestions.length > 0) {
            alert("Î™®Îì† ÏßàÎ¨∏Ïóê ÎãµÎ≥ÄÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî.");
            return;
        }
    
        console.log('Ï†úÏ∂úÎêú ÎãµÎ≥Ä:', answers);
        alert('ÎãµÎ≥ÄÏù¥ Ï†úÏ∂úÎêòÏóàÏäµÎãàÎã§!');
        
        // ÏÑúÎ≤ÑÏóê Ï†úÏ∂úÌï† Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï (SURVEY_NO Ï∂îÍ∞Ä)
        const user = {
            lctrSeq: lctrSeq,
            seq: seq,
            emlAddr: sessionStorage.getItem('emlAddr'),
            submittedSrvys: questions.map((question, index) => ({
                surveyNo: question.surveyNo,  // üîπ SURVEY_NO Ï∂îÍ∞Ä
                userEmlAddr: sessionStorage.getItem('emlAddr'),
                chcRslt: answers[index]
            })) 
        };
    
        fetch(`http://localhost:9192/api/SubmitSrvy`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json; charset=utf-8"
            },
            body: JSON.stringify(user)
        })
        .then((response) => {
            if (response.ok) {
                alert("Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.");
                setAnswers(new Array(questions.length).fill(''));
            } else {
                alert("Ï†ÄÏû• Ïã§Ìå®: " + response.status);
            }
        })
        .catch((error) => {
            console.error('Error:', error);
            alert("Ï†ÄÏû• Ï§ë Ïò§Î•ò Î∞úÏÉù.");
        });
    };
    

    return (
        <div className="form-container">
            <h1>ÎßåÏ°±ÎèÑ ÏÑ§Î¨∏ Ï°∞ÏÇ¨</h1>
            {error && <p className="error">{error}</p>}
            <form id="survey-form" onSubmit={handleSubmit}>
                {questions.length > 0 ? (
                    questions.map((question, questionIndex) => (
                        <div className="question" key={question.surveyNo}>
                            <h2>{question.srvyCn}</h2>
                            {question.srvyType === 'Í∞ùÍ¥ÄÏãù' ? (
                                <ul className="options">
                                    {question.cHc && question.cHc.split(',').map((option, index) => {
                                        const optionId = `q${question.surveyNo}-option-${index}`; // Í≥†Ïú†Ìïú id ÏÉùÏÑ±
                                        return (
                                            <li key={optionId}>
                                                <input 
                                                    type="radio" 
                                                    name={`q${question.surveyNo || 'default'}-${questionIndex}`} // Í∏∞Î≥∏Í∞í 'default' Ï†úÍ≥µ
                                                    id={optionId}
                                                    value={option.trim()} 
                                                    checked={answers[questionIndex] === option.trim()} 
                                                    onChange={handleChange} 
                                                />
                                                <label htmlFor={optionId}>{option.trim()}</label>
                                            </li>
                                        );
                                    })}
                                </ul>
                            ) : question.srvyType === 'Îã®ÎãµÌòï' ? (
                                <input 
                                    type="text" 
                                    name={`q${question.surveyNo || 'default'}-${questionIndex}`} // Í≥†Ïú†Ìïú Ïù¥Î¶Ñ ÏÑ§Ï†ï
                                    id={`q${question.surveyNo}-text`} // Í≥†Ïú†Ìïú id Ï∂îÍ∞Ä
                                    value={answers[questionIndex] || ''} 
                                    onChange={handleChange} 
                                    placeholder="ÎãµÎ≥ÄÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî" 
                                />
                            ) : null}
                        </div>
                    ))
                ) : (
                    <p>ÏßàÎ¨∏Ïù¥ ÏóÜÏäµÎãàÎã§.</p>
                )}
                <div className="button-container">
                    <button type="submit">Îì±Î°ù</button>
                    <button type="button" onClick={() => window.history.back()}>Ï∑®ÏÜå</button>
                </div>
            </form>
        </div>
    );
};

export default UserGetSrvy;
